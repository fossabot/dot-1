{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Warning this package is a WIP and will introduce breaking changes while on major version zero. Dot is a lightweight, pure golang graphviz-compatible dot language implementation focused on generating dot/gv files that Graphviz can then convert into any of its output formats supported (e.g. png, jpeg, svg, pdf). Dot provides both interfaces and ready-to-use concrete types that represent dot language resources - namely Graphs, Nodes and Edges, plus all attributes. This package was inspired/initially forked from emicklei/dot , but has too many breaking changes compared to the original - namely interface usage and other distinct design decisions - so it seemed better to maintain it separately. If you need a simpler, no-brainy option, use emicklei's dot package . Installation Fetch the package using go go get -u github.com/wwmoraes/dot Usage package main import ( \"os\" \"github.com/wwmoraes/dot\" ) func main () { graph := dot . New () graph . Node ( \"n1\" ). SetAttributeString ( \"label\" , \"hello dot!\" ) fd , _ := os . Create ( \"sample.dot\" ) defer fd . Close () graph . WriteTo ( fd ) }","title":"Welcome"},{"location":"#welcome","text":"Warning this package is a WIP and will introduce breaking changes while on major version zero. Dot is a lightweight, pure golang graphviz-compatible dot language implementation focused on generating dot/gv files that Graphviz can then convert into any of its output formats supported (e.g. png, jpeg, svg, pdf). Dot provides both interfaces and ready-to-use concrete types that represent dot language resources - namely Graphs, Nodes and Edges, plus all attributes. This package was inspired/initially forked from emicklei/dot , but has too many breaking changes compared to the original - namely interface usage and other distinct design decisions - so it seemed better to maintain it separately. If you need a simpler, no-brainy option, use emicklei's dot package .","title":"Welcome"},{"location":"#installation","text":"Fetch the package using go go get -u github.com/wwmoraes/dot","title":"Installation"},{"location":"#usage","text":"package main import ( \"os\" \"github.com/wwmoraes/dot\" ) func main () { graph := dot . New () graph . Node ( \"n1\" ). SetAttributeString ( \"label\" , \"hello dot!\" ) fd , _ := os . Create ( \"sample.dot\" ) defer fd . Close () graph . WriteTo ( fd ) }","title":"Usage"},{"location":"attributes/interfaces/Identity/","text":"Identity Implemented by values that have an immutable identifier source package attributes // Identity is implemented by values that have an immutable identifier type Identity interface { // ID returns the immutable id ID () string }","title":"Identity"},{"location":"attributes/interfaces/Identity/#identity","text":"Implemented by values that have an immutable identifier","title":"Identity"},{"location":"attributes/interfaces/Identity/#source","text":"package attributes // Identity is implemented by values that have an immutable identifier type Identity interface { // ID returns the immutable id ID () string }","title":"source"},{"location":"attributes/interfaces/Reader/","text":"Reader Implemented by attribute-based values that allows reading them source package attributes import ( \"fmt\" \"github.com/wwmoraes/dot/constants\" ) // Reader is implemented by attribute-based values that allows reading them type Reader interface { // GetAttribute returns the attribute value or nil if unset GetAttribute ( key constants . Key ) ( fmt . Stringer , bool ) // GetAttributeString returns the attribute as string or an empty string if unset GetAttributeString ( key constants . Key ) string // GetAttributes returns a copy of all attributes GetAttributes () Map // HasAttributes returns true if there's any attribute set HasAttributes () bool }","title":"Reader"},{"location":"attributes/interfaces/Reader/#reader","text":"Implemented by attribute-based values that allows reading them","title":"Reader"},{"location":"attributes/interfaces/Reader/#source","text":"package attributes import ( \"fmt\" \"github.com/wwmoraes/dot/constants\" ) // Reader is implemented by attribute-based values that allows reading them type Reader interface { // GetAttribute returns the attribute value or nil if unset GetAttribute ( key constants . Key ) ( fmt . Stringer , bool ) // GetAttributeString returns the attribute as string or an empty string if unset GetAttributeString ( key constants . Key ) string // GetAttributes returns a copy of all attributes GetAttributes () Map // HasAttributes returns true if there's any attribute set HasAttributes () bool }","title":"source"},{"location":"attributes/interfaces/Serializable/","text":"Serializable Implemented by values that can be printed as string or written directly into an IO device. source package attributes import ( \"io\" ) // Serializable is implemented by values that can be printed as string or // written directly into an IO device type Serializable interface { io . WriterTo String () ( string , error ) }","title":"Serializable"},{"location":"attributes/interfaces/Serializable/#serializable","text":"Implemented by values that can be printed as string or written directly into an IO device.","title":"Serializable"},{"location":"attributes/interfaces/Serializable/#source","text":"package attributes import ( \"io\" ) // Serializable is implemented by values that can be printed as string or // written directly into an IO device type Serializable interface { io . WriterTo String () ( string , error ) }","title":"source"},{"location":"attributes/interfaces/Styleable/","text":"Styleable Implemented by values that support attributes source package attributes // Styleable is implemented by values that support attributes type Styleable interface { Reader Writer }","title":"Styleable"},{"location":"attributes/interfaces/Styleable/#styleable","text":"Implemented by values that support attributes","title":"Styleable"},{"location":"attributes/interfaces/Styleable/#source","text":"package attributes // Styleable is implemented by values that support attributes type Styleable interface { Reader Writer }","title":"source"},{"location":"attributes/interfaces/Writer/","text":"Writer Implemented by attribute-based values that allows mutating them source package attributes import ( \"fmt\" \"github.com/wwmoraes/dot/constants\" ) // Writer is implemented by attribute-based values that allows mutating them type Writer interface { // SetAttribute sets the value for the attribute Key SetAttribute ( key constants . Key , value fmt . Stringer ) // SetAttributeString sets the string value for the attribute Key SetAttributeString ( key constants . Key , value string ) // SetAttributeLiteral sets the literal value for the attribute Key SetAttributeLiteral ( key constants . Key , value string ) // SetAttributeHTML sets the HTML value for the attribute Key SetAttributeHTML ( key constants . Key , value string ) // SetAttributes sets the value for multiple attributes SetAttributes ( attributeMap Map ) // SetAttributesString sets the string value for multiple attributes SetAttributesString ( attributeMap MapString ) // SetAttributesLiteral sets the literal value for multiple attributes SetAttributesLiteral ( attributeMap MapString ) // SetAttributesHTML sets the HTML value for multiple attributes SetAttributesHTML ( attributeMap MapString ) // DeleteAttribute unset the attribute Key DeleteAttribute ( key constants . Key ) }","title":"Writer"},{"location":"attributes/interfaces/Writer/#writer","text":"Implemented by attribute-based values that allows mutating them","title":"Writer"},{"location":"attributes/interfaces/Writer/#source","text":"package attributes import ( \"fmt\" \"github.com/wwmoraes/dot/constants\" ) // Writer is implemented by attribute-based values that allows mutating them type Writer interface { // SetAttribute sets the value for the attribute Key SetAttribute ( key constants . Key , value fmt . Stringer ) // SetAttributeString sets the string value for the attribute Key SetAttributeString ( key constants . Key , value string ) // SetAttributeLiteral sets the literal value for the attribute Key SetAttributeLiteral ( key constants . Key , value string ) // SetAttributeHTML sets the HTML value for the attribute Key SetAttributeHTML ( key constants . Key , value string ) // SetAttributes sets the value for multiple attributes SetAttributes ( attributeMap Map ) // SetAttributesString sets the string value for multiple attributes SetAttributesString ( attributeMap MapString ) // SetAttributesLiteral sets the literal value for multiple attributes SetAttributesLiteral ( attributeMap MapString ) // SetAttributesHTML sets the HTML value for multiple attributes SetAttributesHTML ( attributeMap MapString ) // DeleteAttribute unset the attribute Key DeleteAttribute ( key constants . Key ) }","title":"source"},{"location":"constants/Key/","text":"Key All Graphviz known attributes are mapped as string constants to prevent typos and the creation of multiple string literals across the code. source package constants // Key attribute key type type Key string const ( // KeyBackground xdot format string specifying an arbitrary background // // Valid for: Graphs. KeyBackground Key = \"_background\" // KeyArea indicates the preferred area for a node or empty cluster when // laid out by patchwork // // Valid for: Clusters, Nodes. Note: patchwork only KeyArea Key = \"area\" // KeyArrowHead style of arrowhead on the head node of an edge. This // will only appear if the dir attribute is forward or both // // Valid for: Edges. KeyArrowHead Key = \"arrowhead\" // KeyArrowSize multiplicative scale factor for arrowheads // // Valid for: Edges. KeyArrowSize Key = \"arrowsize\" // KeyArrowTail style of arrowhead on the tail node of an edge. // This will only appear if the dir attribute is back or both. // // Valid for: Edges. KeyArrowTail Key = \"arrowtail\" // KeyBb bounding box of drawing in points // // Valid for: Graphs. Note: write only KeyBb Key = \"bb\" // KeyBgcolor When attached to the root graph, this color is used as the // background for entire canvas. // // When a cluster attribute, it is used as the initial background for the // cluster. If a cluster has a filled style, the cluster\u2019s fillcolor will // overlay the background color. // // If the value is a colorList, a gradient fill is used. By default, this is a // linear fill; setting style=radial will cause a radial fill. Only two colors // are used. If the second color (after a colon) is missing, the default color // is used for it. See also the gradientangle attribute for setting the // gradient angle. KeyBgcolor Key = \"bgcolor\" KeyCenter Key = \"center\" KeyCharset Key = \"charset\" KeyClass Key = \"class\" KeyClusterRank Key = \"clusterrank\" KeyColor Key = \"color\" KeyColorScheme Key = \"colorscheme\" KeyComment Key = \"comment\" KeyCompound Key = \"compound\" KeyConcentrate Key = \"concentrate\" KeyConstraint Key = \"constraint\" KeyDamping Key = \"Damping\" KeyDecorate Key = \"decorate\" KeyDefaultDist Key = \"defaultdist\" KeyDim Key = \"dim\" KeyDimen Key = \"dimen\" KeyDir Key = \"dir\" KeyDirEdgeConstraints Key = \"diredgeconstraints\" KeyDistortion Key = \"distortion\" KeyDpi Key = \"dpi\" KeyEdgeHref Key = \"edgehref\" KeyEdgeTarget Key = \"edgetarget\" KeyEdgeTooltip Key = \"edgetooltip\" KeyEdgeURL Key = \"edgeURL\" KeyEpsilon Key = \"epsilon\" KeyEsep Key = \"esep\" KeyFillColor Key = \"fillcolor\" KeyFixedSize Key = \"fixedsize\" KeyFontColor Key = \"fontcolor\" KeyFontName Key = \"fontname\" KeyFontNames Key = \"fontnames\" KeyFontPath Key = \"fontpath\" KeyFontSize Key = \"fontsize\" KeyForceLabels Key = \"forcelabels\" KeyGradientAngle Key = \"gradientangle\" KeyGroup Key = \"group\" KeyHeadLp Key = \"head_lp\" KeyHeadClip Key = \"headclip\" KeyHeadHref Key = \"headhref\" KeyHeadLabel Key = \"headlabel\" KeyHeadPort Key = \"headport\" KeyHeadTarget Key = \"headtarget\" KeyHeadTooltip Key = \"headtooltip\" KeyHeadURL Key = \"headURL\" KeyHeight Key = \"height\" KeyHref Key = \"href\" KeyID Key = \"id\" KeyImage Key = \"image\" KeyImagePath Key = \"imagepath\" KeyImagePos Key = \"imagepos\" KeyImageScale Key = \"imagescale\" KeyInputScale Key = \"inputscale\" KeyK Key = \"K\" KeyLabel Key = \"label\" KeyLabelScheme Key = \"label_scheme\" KeyLabelAngle Key = \"labelangle\" KeyLabelDistance Key = \"labeldistance\" KeyLabelFloat Key = \"labelfloat\" KeyLabelFontColor Key = \"labelfontcolor\" KeyLabelFontName Key = \"labelfontname\" KeyLabelFontSize Key = \"labelfontsize\" KeyLabelHref Key = \"labelhref\" KeyLabelJust Key = \"labeljust\" KeyLabelLoc Key = \"labelloc\" KeyLabelTarget Key = \"labeltarget\" KeyLabelTooltip Key = \"labeltooltip\" KeyLabelURL Key = \"labelURL\" KeyLandscape Key = \"landscape\" KeyLayer Key = \"layer\" KeyLayerListSep Key = \"layerlistsep\" KeyLayers Key = \"layers\" KeyLayerSelect Key = \"layerselect\" KeyLayerSep Key = \"layersep\" KeyLayout Key = \"layout\" KeyLen Key = \"len\" KeyLevels Key = \"levels\" KeyLevelsGap Key = \"levelsgap\" KeyLHead Key = \"lhead\" KeyLHeight Key = \"lheight\" KeyLp Key = \"lp\" KeyLTail Key = \"ltail\" KeyLWidth Key = \"lwidth\" KeyMargin Key = \"margin\" KeyMaxIter Key = \"maxiter\" KeyMcLimit Key = \"mclimit\" KeyMinDist Key = \"mindist\" KeyMinLen Key = \"minlen\" KeyMode Key = \"mode\" KeyModel Key = \"model\" KeyMosek Key = \"mosek\" KeyNewRank Key = \"newrank\" KeyNodeSep Key = \"nodesep\" KeyNoJustify Key = \"nojustify\" KeyNormalize Key = \"normalize\" KeyNoTranslate Key = \"notranslate\" KeyNsLimit Key = \"nslimit\" KeyNsLimit1 Key = \"nslimit1\" KeyOrdering Key = \"ordering\" KeyOrientation Key = \"orientation\" KeyOutputOrder Key = \"outputorder\" KeyOverlap Key = \"overlap\" KeyOverlapScaling Key = \"overlap_scaling\" KeyOverlapShrink Key = \"overlap_shrink\" KeyPack Key = \"pack\" KeyPackMode Key = \"packmode\" KeyPad Key = \"pad\" KeyPage Key = \"page\" KeyPageDir Key = \"pagedir\" KeyPenColor Key = \"pencolor\" KeyPenWidth Key = \"penwidth\" KeyPeripheries Key = \"peripheries\" KeyPin Key = \"pin\" KeyPos Key = \"pos\" KeyQuadTree Key = \"quadtree\" KeyQuantum Key = \"quantum\" KeyRank Key = \"rank\" KeyRankDir Key = \"rankdir\" KeyRankSep Key = \"ranksep\" KeyRatio Key = \"ratio\" KeyRects Key = \"rects\" KeyRegular Key = \"regular\" KeyRemincross Key = \"remincross\" KeyRepulsiveforce Key = \"repulsiveforce\" KeyResolution Key = \"resolution\" KeyRoot Key = \"root\" KeyRotate Key = \"rotate\" KeyRotation Key = \"rotation\" KeySameHead Key = \"samehead\" KeySameTail Key = \"sametail\" KeySamplePoints Key = \"samplepoints\" KeyScale Key = \"scale\" KeySearchSize Key = \"searchsize\" KeySep Key = \"sep\" KeyShape Key = \"shape\" KeyShapeFile Key = \"shapefile\" KeyShowBoxes Key = \"showboxes\" KeySides Key = \"sides\" KeySize Key = \"size\" KeySkew Key = \"skew\" KeySmoothing Key = \"smoothing\" KeySortv Key = \"sortv\" KeySplines Key = \"splines\" KeyStart Key = \"start\" KeyStyle Key = \"style\" KeyStylesheet Key = \"stylesheet\" KeyTailLp Key = \"tail_lp\" KeyTailClip Key = \"tailclip\" KeyTailHref Key = \"tailhref\" KeyTailLabel Key = \"taillabel\" KeyTailPort Key = \"tailport\" KeyTailTarget Key = \"tailtarget\" KeyTailTooltip Key = \"tailtooltip\" KeyTailURL Key = \"tailURL\" KeyTarget Key = \"target\" KeyTooltip Key = \"tooltip\" KeyTrueColor Key = \"truecolor\" KeyURL Key = \"URL\" KeyVertices Key = \"vertices\" KeyViewport Key = \"viewport\" KeyVoroMargin Key = \"voro_margin\" KeyWeight Key = \"weight\" KeyWidth Key = \"width\" KeyXdotVersion Key = \"xdotversion\" KeyXlabel Key = \"xlabel\" KeyXlp Key = \"xlp\" KeyZ Key = \"z\" )","title":"Key"},{"location":"constants/Key/#key","text":"All Graphviz known attributes are mapped as string constants to prevent typos and the creation of multiple string literals across the code.","title":"Key"},{"location":"constants/Key/#source","text":"package constants // Key attribute key type type Key string const ( // KeyBackground xdot format string specifying an arbitrary background // // Valid for: Graphs. KeyBackground Key = \"_background\" // KeyArea indicates the preferred area for a node or empty cluster when // laid out by patchwork // // Valid for: Clusters, Nodes. Note: patchwork only KeyArea Key = \"area\" // KeyArrowHead style of arrowhead on the head node of an edge. This // will only appear if the dir attribute is forward or both // // Valid for: Edges. KeyArrowHead Key = \"arrowhead\" // KeyArrowSize multiplicative scale factor for arrowheads // // Valid for: Edges. KeyArrowSize Key = \"arrowsize\" // KeyArrowTail style of arrowhead on the tail node of an edge. // This will only appear if the dir attribute is back or both. // // Valid for: Edges. KeyArrowTail Key = \"arrowtail\" // KeyBb bounding box of drawing in points // // Valid for: Graphs. Note: write only KeyBb Key = \"bb\" // KeyBgcolor When attached to the root graph, this color is used as the // background for entire canvas. // // When a cluster attribute, it is used as the initial background for the // cluster. If a cluster has a filled style, the cluster\u2019s fillcolor will // overlay the background color. // // If the value is a colorList, a gradient fill is used. By default, this is a // linear fill; setting style=radial will cause a radial fill. Only two colors // are used. If the second color (after a colon) is missing, the default color // is used for it. See also the gradientangle attribute for setting the // gradient angle. KeyBgcolor Key = \"bgcolor\" KeyCenter Key = \"center\" KeyCharset Key = \"charset\" KeyClass Key = \"class\" KeyClusterRank Key = \"clusterrank\" KeyColor Key = \"color\" KeyColorScheme Key = \"colorscheme\" KeyComment Key = \"comment\" KeyCompound Key = \"compound\" KeyConcentrate Key = \"concentrate\" KeyConstraint Key = \"constraint\" KeyDamping Key = \"Damping\" KeyDecorate Key = \"decorate\" KeyDefaultDist Key = \"defaultdist\" KeyDim Key = \"dim\" KeyDimen Key = \"dimen\" KeyDir Key = \"dir\" KeyDirEdgeConstraints Key = \"diredgeconstraints\" KeyDistortion Key = \"distortion\" KeyDpi Key = \"dpi\" KeyEdgeHref Key = \"edgehref\" KeyEdgeTarget Key = \"edgetarget\" KeyEdgeTooltip Key = \"edgetooltip\" KeyEdgeURL Key = \"edgeURL\" KeyEpsilon Key = \"epsilon\" KeyEsep Key = \"esep\" KeyFillColor Key = \"fillcolor\" KeyFixedSize Key = \"fixedsize\" KeyFontColor Key = \"fontcolor\" KeyFontName Key = \"fontname\" KeyFontNames Key = \"fontnames\" KeyFontPath Key = \"fontpath\" KeyFontSize Key = \"fontsize\" KeyForceLabels Key = \"forcelabels\" KeyGradientAngle Key = \"gradientangle\" KeyGroup Key = \"group\" KeyHeadLp Key = \"head_lp\" KeyHeadClip Key = \"headclip\" KeyHeadHref Key = \"headhref\" KeyHeadLabel Key = \"headlabel\" KeyHeadPort Key = \"headport\" KeyHeadTarget Key = \"headtarget\" KeyHeadTooltip Key = \"headtooltip\" KeyHeadURL Key = \"headURL\" KeyHeight Key = \"height\" KeyHref Key = \"href\" KeyID Key = \"id\" KeyImage Key = \"image\" KeyImagePath Key = \"imagepath\" KeyImagePos Key = \"imagepos\" KeyImageScale Key = \"imagescale\" KeyInputScale Key = \"inputscale\" KeyK Key = \"K\" KeyLabel Key = \"label\" KeyLabelScheme Key = \"label_scheme\" KeyLabelAngle Key = \"labelangle\" KeyLabelDistance Key = \"labeldistance\" KeyLabelFloat Key = \"labelfloat\" KeyLabelFontColor Key = \"labelfontcolor\" KeyLabelFontName Key = \"labelfontname\" KeyLabelFontSize Key = \"labelfontsize\" KeyLabelHref Key = \"labelhref\" KeyLabelJust Key = \"labeljust\" KeyLabelLoc Key = \"labelloc\" KeyLabelTarget Key = \"labeltarget\" KeyLabelTooltip Key = \"labeltooltip\" KeyLabelURL Key = \"labelURL\" KeyLandscape Key = \"landscape\" KeyLayer Key = \"layer\" KeyLayerListSep Key = \"layerlistsep\" KeyLayers Key = \"layers\" KeyLayerSelect Key = \"layerselect\" KeyLayerSep Key = \"layersep\" KeyLayout Key = \"layout\" KeyLen Key = \"len\" KeyLevels Key = \"levels\" KeyLevelsGap Key = \"levelsgap\" KeyLHead Key = \"lhead\" KeyLHeight Key = \"lheight\" KeyLp Key = \"lp\" KeyLTail Key = \"ltail\" KeyLWidth Key = \"lwidth\" KeyMargin Key = \"margin\" KeyMaxIter Key = \"maxiter\" KeyMcLimit Key = \"mclimit\" KeyMinDist Key = \"mindist\" KeyMinLen Key = \"minlen\" KeyMode Key = \"mode\" KeyModel Key = \"model\" KeyMosek Key = \"mosek\" KeyNewRank Key = \"newrank\" KeyNodeSep Key = \"nodesep\" KeyNoJustify Key = \"nojustify\" KeyNormalize Key = \"normalize\" KeyNoTranslate Key = \"notranslate\" KeyNsLimit Key = \"nslimit\" KeyNsLimit1 Key = \"nslimit1\" KeyOrdering Key = \"ordering\" KeyOrientation Key = \"orientation\" KeyOutputOrder Key = \"outputorder\" KeyOverlap Key = \"overlap\" KeyOverlapScaling Key = \"overlap_scaling\" KeyOverlapShrink Key = \"overlap_shrink\" KeyPack Key = \"pack\" KeyPackMode Key = \"packmode\" KeyPad Key = \"pad\" KeyPage Key = \"page\" KeyPageDir Key = \"pagedir\" KeyPenColor Key = \"pencolor\" KeyPenWidth Key = \"penwidth\" KeyPeripheries Key = \"peripheries\" KeyPin Key = \"pin\" KeyPos Key = \"pos\" KeyQuadTree Key = \"quadtree\" KeyQuantum Key = \"quantum\" KeyRank Key = \"rank\" KeyRankDir Key = \"rankdir\" KeyRankSep Key = \"ranksep\" KeyRatio Key = \"ratio\" KeyRects Key = \"rects\" KeyRegular Key = \"regular\" KeyRemincross Key = \"remincross\" KeyRepulsiveforce Key = \"repulsiveforce\" KeyResolution Key = \"resolution\" KeyRoot Key = \"root\" KeyRotate Key = \"rotate\" KeyRotation Key = \"rotation\" KeySameHead Key = \"samehead\" KeySameTail Key = \"sametail\" KeySamplePoints Key = \"samplepoints\" KeyScale Key = \"scale\" KeySearchSize Key = \"searchsize\" KeySep Key = \"sep\" KeyShape Key = \"shape\" KeyShapeFile Key = \"shapefile\" KeyShowBoxes Key = \"showboxes\" KeySides Key = \"sides\" KeySize Key = \"size\" KeySkew Key = \"skew\" KeySmoothing Key = \"smoothing\" KeySortv Key = \"sortv\" KeySplines Key = \"splines\" KeyStart Key = \"start\" KeyStyle Key = \"style\" KeyStylesheet Key = \"stylesheet\" KeyTailLp Key = \"tail_lp\" KeyTailClip Key = \"tailclip\" KeyTailHref Key = \"tailhref\" KeyTailLabel Key = \"taillabel\" KeyTailPort Key = \"tailport\" KeyTailTarget Key = \"tailtarget\" KeyTailTooltip Key = \"tailtooltip\" KeyTailURL Key = \"tailURL\" KeyTarget Key = \"target\" KeyTooltip Key = \"tooltip\" KeyTrueColor Key = \"truecolor\" KeyURL Key = \"URL\" KeyVertices Key = \"vertices\" KeyViewport Key = \"viewport\" KeyVoroMargin Key = \"voro_margin\" KeyWeight Key = \"weight\" KeyWidth Key = \"width\" KeyXdotVersion Key = \"xdotversion\" KeyXlabel Key = \"xlabel\" KeyXlp Key = \"xlp\" KeyZ Key = \"z\" )","title":"source"},{"location":"interfaces/StyledEdge/","text":"StyledEdge Implemented by dot-compatible edge values which have convenience styling methods source package dot // StyledEdge is implemented by dot-compatible edge values which have // convenience styling methods type StyledEdge interface { Edge // Solid sets the edge style to solid Solid () Edge // Solid sets the edge style to bold Bold () Edge // Solid sets the edge style to dashed Dashed () Edge // Solid sets the edge style to dotted Dotted () Edge }","title":"StyledEdge"},{"location":"interfaces/StyledEdge/#stylededge","text":"Implemented by dot-compatible edge values which have convenience styling methods","title":"StyledEdge"},{"location":"interfaces/StyledEdge/#source","text":"package dot // StyledEdge is implemented by dot-compatible edge values which have // convenience styling methods type StyledEdge interface { Edge // Solid sets the edge style to solid Solid () Edge // Solid sets the edge style to bold Bold () Edge // Solid sets the edge style to dashed Dashed () Edge // Solid sets the edge style to dotted Dotted () Edge }","title":"source"},{"location":"interfaces/edge/","text":"Edge Implemented by dot-compatible edge values, with support for attributes. source package dot import \"github.com/wwmoraes/dot/attributes\" // Edge is implemented by dot-compatible edge values type Edge interface { attributes . Styleable attributes . Serializable // From returns the tail node this Edge is connected from From () Node // From returns the head node this Edge is connected to To () Node // Edge creates an Edge to a Node using the head node of this Edge as tail Edge ( to Node ) Edge // Edge creates an Edge with the provided attributes to a Node using the head // node of this Edge as tail EdgeWithAttributes ( to Node , attributes attributes . Reader ) Edge // EdgesTo returns all edges between the head Node of this Edge and the target // Node EdgesTo ( to Node ) [] Edge }","title":"Edge"},{"location":"interfaces/edge/#edge","text":"Implemented by dot-compatible edge values, with support for attributes.","title":"Edge"},{"location":"interfaces/edge/#source","text":"package dot import \"github.com/wwmoraes/dot/attributes\" // Edge is implemented by dot-compatible edge values type Edge interface { attributes . Styleable attributes . Serializable // From returns the tail node this Edge is connected from From () Node // From returns the head node this Edge is connected to To () Node // Edge creates an Edge to a Node using the head node of this Edge as tail Edge ( to Node ) Edge // Edge creates an Edge with the provided attributes to a Node using the head // node of this Edge as tail EdgeWithAttributes ( to Node , attributes attributes . Reader ) Edge // EdgesTo returns all edges between the head Node of this Edge and the target // Node EdgesTo ( to Node ) [] Edge }","title":"source"},{"location":"interfaces/graph/","text":"Graph Implemented by dot-compatible graph values, with support for attributes. Extends attributes' Identity , Styleable and Serializable interfaces. source package dot import ( \"github.com/wwmoraes/dot/attributes\" ) // GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error // NodeInitializerFn mutates Nodes during their creation time type NodeInitializerFn func ( Node ) // EdgeInitializerFn mutates Edges during their creation time type EdgeInitializerFn func ( StyledEdge ) // Graph is implemented by dot-compatible graph values type Graph interface { attributes . Identity attributes . Styleable attributes . Serializable // Root returns the root graph (i.e. the topmost, without a parent graph) Root () Graph // Type returns the graph type: directed, undirected or sub Type () GraphType // FindSubgraph returns the subgraph of this graph or from one of its parents FindSubgraph ( id string ) ( Graph , bool ) // Subgraph creates a subgraph of this graph Subgraph ( optionsFn ... GraphOptionFn ) ( Graph , error ) // Node gets a node by id, or creates a new one if it doesn't exist Node ( id string ) Node // Edge creates a new edge between the two provided nodes Edge ( n1 , n2 Node ) StyledEdge // Edge creates a new edge between the two provided nodes, and also set the // given attributes EdgeWithAttributes ( n1 , n2 Node , attributes attributes . Reader ) StyledEdge // FindEdges gets all edges in the graph between the two provided nodes FindEdges ( fromNode , toNode Node ) ( found [] Edge ) // FindNode gets a node by id FindNode ( id string ) ( Node , bool ) // VisitNodes runs the provided function on all nodes recursively VisitNodes ( callback func ( node Node ) ( done bool )) // AddToSameRank adds the given nodes to the specified rank group, forcing // them to be rendered in the same row AddToSameRank ( group string , nodes ... Node ) // FindNodeByID return node by id FindNodeByID ( id string ) ( foundNode Node , found bool ) // FindNodes returns all nodes recursively FindNodes () ( nodes [] Node ) // HasSubgraphs returns true if the graph has any subgraphs HasSubgraphs () bool // HasNodes returns true if the graph has any nodes HasNodes () bool // HasEdges returns true if the graph has any nodes HasEdges () bool // HasSameRankNodes returns true if the graph has nodes grouped as same rank HasSameRankNodes () bool // IsStrict return true if the graph is set as strict IsStrict () bool }","title":"Graph"},{"location":"interfaces/graph/#graph","text":"Implemented by dot-compatible graph values, with support for attributes. Extends attributes' Identity , Styleable and Serializable interfaces.","title":"Graph"},{"location":"interfaces/graph/#source","text":"package dot import ( \"github.com/wwmoraes/dot/attributes\" ) // GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error // NodeInitializerFn mutates Nodes during their creation time type NodeInitializerFn func ( Node ) // EdgeInitializerFn mutates Edges during their creation time type EdgeInitializerFn func ( StyledEdge ) // Graph is implemented by dot-compatible graph values type Graph interface { attributes . Identity attributes . Styleable attributes . Serializable // Root returns the root graph (i.e. the topmost, without a parent graph) Root () Graph // Type returns the graph type: directed, undirected or sub Type () GraphType // FindSubgraph returns the subgraph of this graph or from one of its parents FindSubgraph ( id string ) ( Graph , bool ) // Subgraph creates a subgraph of this graph Subgraph ( optionsFn ... GraphOptionFn ) ( Graph , error ) // Node gets a node by id, or creates a new one if it doesn't exist Node ( id string ) Node // Edge creates a new edge between the two provided nodes Edge ( n1 , n2 Node ) StyledEdge // Edge creates a new edge between the two provided nodes, and also set the // given attributes EdgeWithAttributes ( n1 , n2 Node , attributes attributes . Reader ) StyledEdge // FindEdges gets all edges in the graph between the two provided nodes FindEdges ( fromNode , toNode Node ) ( found [] Edge ) // FindNode gets a node by id FindNode ( id string ) ( Node , bool ) // VisitNodes runs the provided function on all nodes recursively VisitNodes ( callback func ( node Node ) ( done bool )) // AddToSameRank adds the given nodes to the specified rank group, forcing // them to be rendered in the same row AddToSameRank ( group string , nodes ... Node ) // FindNodeByID return node by id FindNodeByID ( id string ) ( foundNode Node , found bool ) // FindNodes returns all nodes recursively FindNodes () ( nodes [] Node ) // HasSubgraphs returns true if the graph has any subgraphs HasSubgraphs () bool // HasNodes returns true if the graph has any nodes HasNodes () bool // HasEdges returns true if the graph has any nodes HasEdges () bool // HasSameRankNodes returns true if the graph has nodes grouped as same rank HasSameRankNodes () bool // IsStrict return true if the graph is set as strict IsStrict () bool }","title":"source"},{"location":"interfaces/node/","text":"Node Implemented by dot-compatible node values, with support for attributes. source package dot import \"github.com/wwmoraes/dot/attributes\" // Node is implemented by dot-compatible node values type Node interface { attributes . Identity attributes . Styleable attributes . Serializable // Edge creates an Edge to a Node Edge ( to Node ) Edge // EdgeWithAttributes creates an Edge with the provided attributes to a Node EdgeWithAttributes ( to Node , attributes attributes . Reader ) Edge // EdgesTo returns all edges between this Node and the target Node EdgesTo ( to Node ) [] Edge } // StyledNode is implemented by dot-compatible node values which have // convenience styling methods type StyledNode interface { // Box sets the node style to box Box () Node }","title":"Node"},{"location":"interfaces/node/#node","text":"Implemented by dot-compatible node values, with support for attributes.","title":"Node"},{"location":"interfaces/node/#source","text":"package dot import \"github.com/wwmoraes/dot/attributes\" // Node is implemented by dot-compatible node values type Node interface { attributes . Identity attributes . Styleable attributes . Serializable // Edge creates an Edge to a Node Edge ( to Node ) Edge // EdgeWithAttributes creates an Edge with the provided attributes to a Node EdgeWithAttributes ( to Node , attributes attributes . Reader ) Edge // EdgesTo returns all edges between this Node and the target Node EdgesTo ( to Node ) [] Edge } // StyledNode is implemented by dot-compatible node values which have // convenience styling methods type StyledNode interface { // Box sets the node style to box Box () Node }","title":"source"},{"location":"types/GraphOptionFn/","text":"GraphOptionFn Implemented by functor values that set properties on a GraphOptions instance, which are then used by Graph s NewGraph / Graph.Subgraph to configure new [sub]graphs. A nil error is expected as a return value if the functor has successfully set the options it is intended to. These functors are usually returned by With* functions that are free to accept any parameters to be used within the functor, e.g. func WithMyOptions ( id string ) GraphOptionFn { return func ( options GraphOptions ) error { // use the given id options . SetID ( id ) // always create as strict options . SetStrict ( true ) // use undirected (graph) instead of the default directed (digraph) options . SetType ( GraphTypeUndirected ) return nil } } then it can be used as graph , _ := dot . New ( WithMyOptions ( \"some-id\" )) implementation // GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error source package dot import ( \"github.com/wwmoraes/dot/attributes\" ) // GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error // NodeInitializerFn mutates Nodes during their creation time type NodeInitializerFn func ( Node ) // EdgeInitializerFn mutates Edges during their creation time type EdgeInitializerFn func ( StyledEdge ) // Graph is implemented by dot-compatible graph values type Graph interface { attributes . Identity attributes . Styleable attributes . Serializable // Root returns the root graph (i.e. the topmost, without a parent graph) Root () Graph // Type returns the graph type: directed, undirected or sub Type () GraphType // FindSubgraph returns the subgraph of this graph or from one of its parents FindSubgraph ( id string ) ( Graph , bool ) // Subgraph creates a subgraph of this graph Subgraph ( optionsFn ... GraphOptionFn ) ( Graph , error ) // Node gets a node by id, or creates a new one if it doesn't exist Node ( id string ) Node // Edge creates a new edge between the two provided nodes Edge ( n1 , n2 Node ) StyledEdge // Edge creates a new edge between the two provided nodes, and also set the // given attributes EdgeWithAttributes ( n1 , n2 Node , attributes attributes . Reader ) StyledEdge // FindEdges gets all edges in the graph between the two provided nodes FindEdges ( fromNode , toNode Node ) ( found [] Edge ) // FindNode gets a node by id FindNode ( id string ) ( Node , bool ) // VisitNodes runs the provided function on all nodes recursively VisitNodes ( callback func ( node Node ) ( done bool )) // AddToSameRank adds the given nodes to the specified rank group, forcing // them to be rendered in the same row AddToSameRank ( group string , nodes ... Node ) // FindNodeByID return node by id FindNodeByID ( id string ) ( foundNode Node , found bool ) // FindNodes returns all nodes recursively FindNodes () ( nodes [] Node ) // HasSubgraphs returns true if the graph has any subgraphs HasSubgraphs () bool // HasNodes returns true if the graph has any nodes HasNodes () bool // HasEdges returns true if the graph has any nodes HasEdges () bool // HasSameRankNodes returns true if the graph has nodes grouped as same rank HasSameRankNodes () bool // IsStrict return true if the graph is set as strict IsStrict () bool }","title":"GraphOptionFn"},{"location":"types/GraphOptionFn/#graphoptionfn","text":"Implemented by functor values that set properties on a GraphOptions instance, which are then used by Graph s NewGraph / Graph.Subgraph to configure new [sub]graphs. A nil error is expected as a return value if the functor has successfully set the options it is intended to. These functors are usually returned by With* functions that are free to accept any parameters to be used within the functor, e.g. func WithMyOptions ( id string ) GraphOptionFn { return func ( options GraphOptions ) error { // use the given id options . SetID ( id ) // always create as strict options . SetStrict ( true ) // use undirected (graph) instead of the default directed (digraph) options . SetType ( GraphTypeUndirected ) return nil } } then it can be used as graph , _ := dot . New ( WithMyOptions ( \"some-id\" ))","title":"GraphOptionFn"},{"location":"types/GraphOptionFn/#implementation","text":"// GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error","title":"implementation"},{"location":"types/GraphOptionFn/#source","text":"package dot import ( \"github.com/wwmoraes/dot/attributes\" ) // GraphOptionFn is a functor that mutates graph options type GraphOptionFn func ( GraphOptions ) error // NodeInitializerFn mutates Nodes during their creation time type NodeInitializerFn func ( Node ) // EdgeInitializerFn mutates Edges during their creation time type EdgeInitializerFn func ( StyledEdge ) // Graph is implemented by dot-compatible graph values type Graph interface { attributes . Identity attributes . Styleable attributes . Serializable // Root returns the root graph (i.e. the topmost, without a parent graph) Root () Graph // Type returns the graph type: directed, undirected or sub Type () GraphType // FindSubgraph returns the subgraph of this graph or from one of its parents FindSubgraph ( id string ) ( Graph , bool ) // Subgraph creates a subgraph of this graph Subgraph ( optionsFn ... GraphOptionFn ) ( Graph , error ) // Node gets a node by id, or creates a new one if it doesn't exist Node ( id string ) Node // Edge creates a new edge between the two provided nodes Edge ( n1 , n2 Node ) StyledEdge // Edge creates a new edge between the two provided nodes, and also set the // given attributes EdgeWithAttributes ( n1 , n2 Node , attributes attributes . Reader ) StyledEdge // FindEdges gets all edges in the graph between the two provided nodes FindEdges ( fromNode , toNode Node ) ( found [] Edge ) // FindNode gets a node by id FindNode ( id string ) ( Node , bool ) // VisitNodes runs the provided function on all nodes recursively VisitNodes ( callback func ( node Node ) ( done bool )) // AddToSameRank adds the given nodes to the specified rank group, forcing // them to be rendered in the same row AddToSameRank ( group string , nodes ... Node ) // FindNodeByID return node by id FindNodeByID ( id string ) ( foundNode Node , found bool ) // FindNodes returns all nodes recursively FindNodes () ( nodes [] Node ) // HasSubgraphs returns true if the graph has any subgraphs HasSubgraphs () bool // HasNodes returns true if the graph has any nodes HasNodes () bool // HasEdges returns true if the graph has any nodes HasEdges () bool // HasSameRankNodes returns true if the graph has nodes grouped as same rank HasSameRankNodes () bool // IsStrict return true if the graph is set as strict IsStrict () bool }","title":"source"}]}